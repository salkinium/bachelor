#
# This class is automatically generated by mig. DO NOT EDIT THIS FILE.
# This class implements a Python interface to the 'SerialMessage'
# message type.
#

import os, sys
sys.path.append(os.path.join(os.path.dirname(__file__), '..', '..', 'tinyos', 'support', 'sdk', 'python'))
import tinyos.message.Message

# The default size of this message type in bytes.
DEFAULT_MESSAGE_SIZE = 110

# The Active Message type associated with this message.
AM_TYPE = 13

class SerialMessage(tinyos.message.Message.Message):
    # Create a new SerialMessage of size 110.
    def __init__(self, data="", addr=None, gid=None, base_offset=0, data_length=110):
        tinyos.message.Message.Message.__init__(self, data, addr, gid, base_offset, data_length)
        self.amTypeSet(AM_TYPE)
    
    # Get AM_TYPE
    def get_amType(cls):
        return AM_TYPE
    
    get_amType = classmethod(get_amType)
    
    #
    # Return a String representation of this message. Includes the
    # message type name and the non-indexed field values.
    #
    def __str__(self):
        s = "Message <SerialMessage> \n"
        try:
            s += "  [header.type=0x%x]\n" % (self.get_header_type())
        except:
            pass
        try:
            s += "  [header.channel=0x%x]\n" % (self.get_header_channel())
        except:
            pass
        try:
            s += "  [header.power=0x%x]\n" % (self.get_header_power())
        except:
            pass
        try:
            s += "  [header.len=0x%x]\n" % (self.get_header_len())
        except:
            pass
        try:
            s += "  [header.nodeid=0x%x]\n" % (self.get_header_nodeid())
        except:
            pass
        try:
            s += "  [header.seqnum=0x%x]\n" % (self.get_header_seqnum())
        except:
            pass
        try:
            s += "  [header.metadata=";
            for i in range(0, 2):
                s += "0x%x " % (self.getElement_header_metadata(i) & 0xff)
            s += "]\n";
        except:
            pass
        try:
            s += "  [data=";
            for i in range(0, 100):
                s += "0x%x " % (self.getElement_data(i) & 0xff)
            s += "]\n";
        except:
            pass
        return s

    # Message-type-specific access methods appear below.

    #
    # Accessor methods for field: header.type
    #   Field type: short
    #   Offset (bits): 0
    #   Size (bits): 8
    #

    #
    # Return whether the field 'header.type' is signed (False).
    #
    def isSigned_header_type(self):
        return False
    
    #
    # Return whether the field 'header.type' is an array (False).
    #
    def isArray_header_type(self):
        return False
    
    #
    # Return the offset (in bytes) of the field 'header.type'
    #
    def offset_header_type(self):
        return (0 / 8)
    
    #
    # Return the offset (in bits) of the field 'header.type'
    #
    def offsetBits_header_type(self):
        return 0
    
    #
    # Return the value (as a short) of the field 'header.type'
    #
    def get_header_type(self):
        return self.getUIntElement(self.offsetBits_header_type(), 8, 1)
    
    #
    # Set the value of the field 'header.type'
    #
    def set_header_type(self, value):
        self.setUIntElement(self.offsetBits_header_type(), 8, value, 1)
    
    #
    # Return the size, in bytes, of the field 'header.type'
    #
    def size_header_type(self):
        return (8 / 8)
    
    #
    # Return the size, in bits, of the field 'header.type'
    #
    def sizeBits_header_type(self):
        return 8
    
    #
    # Accessor methods for field: header.channel
    #   Field type: short
    #   Offset (bits): 8
    #   Size (bits): 8
    #

    #
    # Return whether the field 'header.channel' is signed (False).
    #
    def isSigned_header_channel(self):
        return False
    
    #
    # Return whether the field 'header.channel' is an array (False).
    #
    def isArray_header_channel(self):
        return False
    
    #
    # Return the offset (in bytes) of the field 'header.channel'
    #
    def offset_header_channel(self):
        return (8 / 8)
    
    #
    # Return the offset (in bits) of the field 'header.channel'
    #
    def offsetBits_header_channel(self):
        return 8
    
    #
    # Return the value (as a short) of the field 'header.channel'
    #
    def get_header_channel(self):
        return self.getUIntElement(self.offsetBits_header_channel(), 8, 1)
    
    #
    # Set the value of the field 'header.channel'
    #
    def set_header_channel(self, value):
        self.setUIntElement(self.offsetBits_header_channel(), 8, value, 1)
    
    #
    # Return the size, in bytes, of the field 'header.channel'
    #
    def size_header_channel(self):
        return (8 / 8)
    
    #
    # Return the size, in bits, of the field 'header.channel'
    #
    def sizeBits_header_channel(self):
        return 8
    
    #
    # Accessor methods for field: header.power
    #   Field type: short
    #   Offset (bits): 16
    #   Size (bits): 8
    #

    #
    # Return whether the field 'header.power' is signed (False).
    #
    def isSigned_header_power(self):
        return False
    
    #
    # Return whether the field 'header.power' is an array (False).
    #
    def isArray_header_power(self):
        return False
    
    #
    # Return the offset (in bytes) of the field 'header.power'
    #
    def offset_header_power(self):
        return (16 / 8)
    
    #
    # Return the offset (in bits) of the field 'header.power'
    #
    def offsetBits_header_power(self):
        return 16
    
    #
    # Return the value (as a short) of the field 'header.power'
    #
    def get_header_power(self):
        return self.getUIntElement(self.offsetBits_header_power(), 8, 1)
    
    #
    # Set the value of the field 'header.power'
    #
    def set_header_power(self, value):
        self.setUIntElement(self.offsetBits_header_power(), 8, value, 1)
    
    #
    # Return the size, in bytes, of the field 'header.power'
    #
    def size_header_power(self):
        return (8 / 8)
    
    #
    # Return the size, in bits, of the field 'header.power'
    #
    def sizeBits_header_power(self):
        return 8
    
    #
    # Accessor methods for field: header.len
    #   Field type: short
    #   Offset (bits): 24
    #   Size (bits): 8
    #

    #
    # Return whether the field 'header.len' is signed (False).
    #
    def isSigned_header_len(self):
        return False
    
    #
    # Return whether the field 'header.len' is an array (False).
    #
    def isArray_header_len(self):
        return False
    
    #
    # Return the offset (in bytes) of the field 'header.len'
    #
    def offset_header_len(self):
        return (24 / 8)
    
    #
    # Return the offset (in bits) of the field 'header.len'
    #
    def offsetBits_header_len(self):
        return 24
    
    #
    # Return the value (as a short) of the field 'header.len'
    #
    def get_header_len(self):
        return self.getUIntElement(self.offsetBits_header_len(), 8, 1)
    
    #
    # Set the value of the field 'header.len'
    #
    def set_header_len(self, value):
        self.setUIntElement(self.offsetBits_header_len(), 8, value, 1)
    
    #
    # Return the size, in bytes, of the field 'header.len'
    #
    def size_header_len(self):
        return (8 / 8)
    
    #
    # Return the size, in bits, of the field 'header.len'
    #
    def sizeBits_header_len(self):
        return 8
    
    #
    # Accessor methods for field: header.nodeid
    #   Field type: int
    #   Offset (bits): 32
    #   Size (bits): 16
    #

    #
    # Return whether the field 'header.nodeid' is signed (False).
    #
    def isSigned_header_nodeid(self):
        return False
    
    #
    # Return whether the field 'header.nodeid' is an array (False).
    #
    def isArray_header_nodeid(self):
        return False
    
    #
    # Return the offset (in bytes) of the field 'header.nodeid'
    #
    def offset_header_nodeid(self):
        return (32 / 8)
    
    #
    # Return the offset (in bits) of the field 'header.nodeid'
    #
    def offsetBits_header_nodeid(self):
        return 32
    
    #
    # Return the value (as a int) of the field 'header.nodeid'
    #
    def get_header_nodeid(self):
        return self.getUIntElement(self.offsetBits_header_nodeid(), 16, 1)
    
    #
    # Set the value of the field 'header.nodeid'
    #
    def set_header_nodeid(self, value):
        self.setUIntElement(self.offsetBits_header_nodeid(), 16, value, 1)
    
    #
    # Return the size, in bytes, of the field 'header.nodeid'
    #
    def size_header_nodeid(self):
        return (16 / 8)
    
    #
    # Return the size, in bits, of the field 'header.nodeid'
    #
    def sizeBits_header_nodeid(self):
        return 16
    
    #
    # Accessor methods for field: header.seqnum
    #   Field type: int
    #   Offset (bits): 48
    #   Size (bits): 16
    #

    #
    # Return whether the field 'header.seqnum' is signed (False).
    #
    def isSigned_header_seqnum(self):
        return False
    
    #
    # Return whether the field 'header.seqnum' is an array (False).
    #
    def isArray_header_seqnum(self):
        return False
    
    #
    # Return the offset (in bytes) of the field 'header.seqnum'
    #
    def offset_header_seqnum(self):
        return (48 / 8)
    
    #
    # Return the offset (in bits) of the field 'header.seqnum'
    #
    def offsetBits_header_seqnum(self):
        return 48
    
    #
    # Return the value (as a int) of the field 'header.seqnum'
    #
    def get_header_seqnum(self):
        return self.getUIntElement(self.offsetBits_header_seqnum(), 16, 1)
    
    #
    # Set the value of the field 'header.seqnum'
    #
    def set_header_seqnum(self, value):
        self.setUIntElement(self.offsetBits_header_seqnum(), 16, value, 1)
    
    #
    # Return the size, in bytes, of the field 'header.seqnum'
    #
    def size_header_seqnum(self):
        return (16 / 8)
    
    #
    # Return the size, in bits, of the field 'header.seqnum'
    #
    def sizeBits_header_seqnum(self):
        return 16
    
    #
    # Accessor methods for field: header.metadata
    #   Field type: short[]
    #   Offset (bits): 64
    #   Size of each element (bits): 8
    #

    #
    # Return whether the field 'header.metadata' is signed (False).
    #
    def isSigned_header_metadata(self):
        return False
    
    #
    # Return whether the field 'header.metadata' is an array (True).
    #
    def isArray_header_metadata(self):
        return True
    
    #
    # Return the offset (in bytes) of the field 'header.metadata'
    #
    def offset_header_metadata(self, index1):
        offset = 64
        if index1 < 0 or index1 >= 2:
            raise IndexError
        offset += 0 + index1 * 8
        return (offset / 8)
    
    #
    # Return the offset (in bits) of the field 'header.metadata'
    #
    def offsetBits_header_metadata(self, index1):
        offset = 64
        if index1 < 0 or index1 >= 2:
            raise IndexError
        offset += 0 + index1 * 8
        return offset
    
    #
    # Return the entire array 'header.metadata' as a short[]
    #
    def get_header_metadata(self):
        tmp = [None]*2
        for index0 in range (0, self.numElements_header_metadata(0)):
                tmp[index0] = self.getElement_header_metadata(index0)
        return tmp
    
    #
    # Set the contents of the array 'header.metadata' from the given short[]
    #
    def set_header_metadata(self, value):
        for index0 in range(0, len(value)):
            self.setElement_header_metadata(index0, value[index0])

    #
    # Return an element (as a short) of the array 'header.metadata'
    #
    def getElement_header_metadata(self, index1):
        return self.getUIntElement(self.offsetBits_header_metadata(index1), 8, 1)
    
    #
    # Set an element of the array 'header.metadata'
    #
    def setElement_header_metadata(self, index1, value):
        self.setUIntElement(self.offsetBits_header_metadata(index1), 8, value, 1)
    
    #
    # Return the total size, in bytes, of the array 'header.metadata'
    #
    def totalSize_header_metadata(self):
        return (16 / 8)
    
    #
    # Return the total size, in bits, of the array 'header.metadata'
    #
    def totalSizeBits_header_metadata(self):
        return 16
    
    #
    # Return the size, in bytes, of each element of the array 'header.metadata'
    #
    def elementSize_header_metadata(self):
        return (8 / 8)
    
    #
    # Return the size, in bits, of each element of the array 'header.metadata'
    #
    def elementSizeBits_header_metadata(self):
        return 8
    
    #
    # Return the number of dimensions in the array 'header.metadata'
    #
    def numDimensions_header_metadata(self):
        return 1
    
    #
    # Return the number of elements in the array 'header.metadata'
    #
    def numElements_header_metadata():
        return 2
    
    #
    # Return the number of elements in the array 'header.metadata'
    # for the given dimension.
    #
    def numElements_header_metadata(self, dimension):
        array_dims = [ 2,  ]
        if dimension < 0 or dimension >= 1:
            raise IndexException
        if array_dims[dimension] == 0:
            raise IndexError
        return array_dims[dimension]
    
    #
    # Fill in the array 'header.metadata' with a String
    #
    def setString_header_metadata(self, s):
         l = len(s)
         for i in range(0, l):
             self.setElement_header_metadata(i, ord(s[i]));
         self.setElement_header_metadata(l, 0) #null terminate
    
    #
    # Read the array 'header.metadata' as a String
    #
    def getString_header_metadata(self):
        carr = "";
        for i in range(0, 4000):
            if self.getElement_header_metadata(i) == chr(0):
                break
            carr += self.getElement_header_metadata(i)
        return carr
    
    #
    # Accessor methods for field: data
    #   Field type: short[]
    #   Offset (bits): 80
    #   Size of each element (bits): 8
    #

    #
    # Return whether the field 'data' is signed (False).
    #
    def isSigned_data(self):
        return False
    
    #
    # Return whether the field 'data' is an array (True).
    #
    def isArray_data(self):
        return True
    
    #
    # Return the offset (in bytes) of the field 'data'
    #
    def offset_data(self, index1):
        offset = 80
        if index1 < 0 or index1 >= 100:
            raise IndexError
        offset += 0 + index1 * 8
        return (offset / 8)
    
    #
    # Return the offset (in bits) of the field 'data'
    #
    def offsetBits_data(self, index1):
        offset = 80
        if index1 < 0 or index1 >= 100:
            raise IndexError
        offset += 0 + index1 * 8
        return offset
    
    #
    # Return the entire array 'data' as a short[]
    #
    def get_data(self):
        tmp = [None]*100
        for index0 in range (0, self.numElements_data(0)):
                tmp[index0] = self.getElement_data(index0)
        return tmp
    
    #
    # Set the contents of the array 'data' from the given short[]
    #
    def set_data(self, value):
        for index0 in range(0, len(value)):
            self.setElement_data(index0, value[index0])

    #
    # Return an element (as a short) of the array 'data'
    #
    def getElement_data(self, index1):
        return self.getUIntElement(self.offsetBits_data(index1), 8, 1)
    
    #
    # Set an element of the array 'data'
    #
    def setElement_data(self, index1, value):
        self.setUIntElement(self.offsetBits_data(index1), 8, value, 1)
    
    #
    # Return the total size, in bytes, of the array 'data'
    #
    def totalSize_data(self):
        return (800 / 8)
    
    #
    # Return the total size, in bits, of the array 'data'
    #
    def totalSizeBits_data(self):
        return 800
    
    #
    # Return the size, in bytes, of each element of the array 'data'
    #
    def elementSize_data(self):
        return (8 / 8)
    
    #
    # Return the size, in bits, of each element of the array 'data'
    #
    def elementSizeBits_data(self):
        return 8
    
    #
    # Return the number of dimensions in the array 'data'
    #
    def numDimensions_data(self):
        return 1
    
    #
    # Return the number of elements in the array 'data'
    #
    def numElements_data():
        return 100
    
    #
    # Return the number of elements in the array 'data'
    # for the given dimension.
    #
    def numElements_data(self, dimension):
        array_dims = [ 100,  ]
        if dimension < 0 or dimension >= 1:
            raise IndexException
        if array_dims[dimension] == 0:
            raise IndexError
        return array_dims[dimension]
    
    #
    # Fill in the array 'data' with a String
    #
    def setString_data(self, s):
         l = len(s)
         for i in range(0, l):
             self.setElement_data(i, ord(s[i]));
         self.setElement_data(l, 0) #null terminate
    
    #
    # Read the array 'data' as a String
    #
    def getString_data(self):
        carr = "";
        for i in range(0, 4000):
            if self.getElement_data(i) == chr(0):
                break
            carr += self.getElement_data(i)
        return carr
    
